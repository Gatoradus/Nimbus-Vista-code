#!/usr/bin/env python3


from tkinter import Tk, Label, Button, Canvas, W, E, N, S, Frame, Menu
from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showerror
import time
from Player import  *


def hello(self):
        pass

def editmenu(self):
    pass

def filemenu(self):
    pass

def helpmenu(self):
    pass

class FITSGUI(Frame):
    
    
    
    def __init__(self, master):
        Frame.__init__(self)
        self.master = master
        self.xscale = 5
        self.yscale = 5
        self.player = Player()
        self.fieldUpdateInterval = 1
        self.fieldX = 10
        self.fieldY = 10
        self.fieldW = 540
        self.fieldH = 490
       
        #master.title("A simple GUI")
        self.players = {}
        self.selectedPlayer = None
        self.master.title("FiTS Control Console")
        self.master.rowconfigure(5, weight=1)
        self.master.columnconfigure(5, weight=1)
        self.grid(sticky=W+E+N+S)

        self.button = Button(self, text="Browse", command=self.load_file, width=10)
        self.button.grid(row=1, column=0, sticky=W)


        self.label = Label(master, text="FiTS Control Console")
        self.label.grid(row=1, column=0, sticky=E)

        self.greet_button = Button(master, text="Test Button 1", command=self.greet)
        self.greet_button.grid(row=1, column=2, sticky=W)

        self.close_button = Button(master, text="Close", command=master.quit)
        self.close_button.grid(row=2, column=2, sticky=N)
        w = Canvas(master, width=680, height=600)
        w.grid(row=2, column=0, sticky=W)

        self.menubar = Menu(self.master)

# create a pulldown menu, and add it to the menu bar
        self.filemenu = Menu(self.menubar, tearoff=0)
        self.filemenu.add_command(label="Open", command=hello)
        self.filemenu.add_command(label="Save", command=hello)
        self.filemenu.add_separator()
        self.filemenu.add_command(label="Exit", command=root.quit)
        self.menubar.add_cascade(label="File", menu=filemenu)
        
        # create more pulldown menus
        self.editmenu = Menu(self.menubar, tearoff=0)
        self.editmenu.add_command(label="Cut", command=hello)
        self.editmenu.add_command(label="Copy", command=hello)
        self.editmenu.add_command(label="Paste", command=hello)
        self.menubar.add_cascade(label="Edit", menu=editmenu)
        
        self.helpmenu = Menu(self.menubar, tearoff=0)
        self.helpmenu.add_command(label="About", command=hello)
        self.menubar.add_cascade(label="Help", menu=helpmenu)
        
        # display the menu
        self.master.config(menu=self.menubar)#w.create_line(0, 0, 200, 100)
        #w.create_line(0, 100, 200, 0, fill="red", dash=(4, 4))

        #w.create_rectangle(50, 25, 150, 75, fill="blue") 
        self.w = w   
        self.master.after(0,self.drawPlayers)
        self.w.create_rectangle(0,0, 680,600 ,fill="grey")

    def greet(self):
        print("Greetings!")
        
    def drawField(self):
        self.w.create_line(self.fieldX, self.fieldY, self.fieldX, self.fieldY + self.fieldH,fill="blue")
        self.w.create_line(self.fieldX + self.fieldW, self.fieldY, self.fieldX + self.fieldW, self.fieldY + self.fieldH,fill="blue")
        self.w.create_line(self.fieldX, self.fieldY, self.fieldX + self.fieldW, self.fieldY,fill="blue")
        self.w.create_line(self.fieldX, self.fieldY + self.fieldH, self.fieldX + self.fieldW, self.fieldY + self.fieldH,fill="blue")
    
     #   self.w.create_line(self.fieldX, self.fieldY, self.fieldX, self.fieldY + self.fieldW,fill="blue")
    def drawPlayers(self):
        #self.w.create_rectangle(0,0, 680,600 ,fill="grey")
        self.w.create_rectangle(0,0, 680,600 ,fill="grey")
        self.drawField()
        time.sleep(0.1)
        
        #print ("FITS:" + str(self.player.playerMap))
        for pid, player in self.players.items():
            self.w.create_rectangle(player.x*self.xscale, player.y*self.yscale,
                                    (player.x+1)*self.xscale, (player.y+1)*self.yscale, fill="blue")
        if self.selectedPlayer:
            sp = self.players[self.selectedPlayer]
            #self.w.create_rectangle(30,30,50,50, fill="black")
            if sp.playerMap:
                #self.w.create_rectangle(30,30,50,50, fill="black")
                for pid, p10000 in sp.playerMap.items():
                #if '10000' in sp.playerMap:
                    #p10000 = sp.playerMap['10000']
                    self.w.create_rectangle(p10000.x*self.xscale, p10000.y*self.yscale,(p10000.x+1)*self.xscale, (p10000.y+1)*self.yscale, fill="green")
                    #                        (player.x+1)*self.xscale, (player.y+1)*self.yscale, fil
                #for id, player in sp.playerMap:
#                   #pass
#                    #self.w.create_rectangle(player.x*self.xscale, player.y*self.yscale,
                    #                        (player.x+1)*self.xscale, (player.y+1)*self.yscale, fill="yellow")
#         
         
        self.master.after(self.fieldUpdateInterval, self.drawPlayers)
        
        
    def load_file(self):
        fname = askopenfilename(filetypes=(("Player files", "*.json"),
                                           ("HTML files", "*.html;*.htm"),
                                           ("All files", "*.*") ))
        if fname:
            p = Player(fname=fname)
            p.brainThread.start()
            self.players[p.id] = p
            self.selectedPlayer = p.id
            
            
#            try:
#                print("""Loading Player: self.settings["template"].set(fname)""")
#                #fp = open(fname,'r')#  
#                p = Player(fname=fname)
#                print (str(p))
#            except:                     # <- naked except is a bad idea
#                showerror("Open Player File", "Failed to read file\n'%s'" % fname)
#            return

root = Tk()
root.quit = root.destroy
fitsGui = FITSGUI(root)
root.mainloop()